
# SCRIPT TO APPLY LOCATION VALUES SPECIFIC TO EACH DAMAGE FUNCTION USED FOR EACH FACILITY.
# TT - January 2018

# Script applies asset-value data from the LocationsValues sheet in TCSDB_structure.xlsx that has been written to file locationvalues4SE.csv by load_tcsdb_4scoringengine.r.  This script is in the scoring_engine directory and writes to the nonphysical directory.

# Execution:  ./script_locationvalues_v1 <locationvalues4SE.csv file> <locfile.damages.allDFs file>
# Example:    ./script_locationvalues_v1 locationvalues4SE.csv TCSDB_structure.locations.csv.damages.allDFs

# Get input.
valuesfile=$1
allDFsfile=$2

# Clean up the locationvalues data.
# Note that the fashion in which the damages files treated by cat in script_assemble_damages_v1 means that the non-tbd DFs will be in aphabetical order according to their main label (tx90p, drought, coastalflood).  
# XXX:  This means that columns in the current input data must also be reordered in the awk print statement below, and this will need to be monitored/changed as the DF types grow.  This is being handled automatically by building temp4i below.
sed 's/;/ /g' $valuesfile > temp1
sed 's/"//g' temp1 > temp2
sed 's/ /_/' temp2 > temp3
sed 's/ /_/' temp3 > temp4
#awk '{print $1,$4,$3,$2,$5,$6,$7}' temp4 > temp4b
awk '{if(NR==1) {for(i=2; i<=NF; i++) {dfname=substr($i,4,length($i)); if(substr(dfname,1,3)!="tbd") print dfname, i} } }' temp4 > temp4c
sort temp4c > temp4d
echo LASTLINE >> temp4d
awk '{if($1!="LASTLINE") string=string" $"$2; else print string}' temp4d > temp4e
awk '{if(NR==1) {for(i=2; i<=NF; i++) {dfname=substr($i,4,length($i)); if(substr(dfname,1,3)=="tbd") string=string" $"i}; print string} }' temp4 > temp4f
paste temp4e temp4f > temp4g
awk '{string="awk SSS{print $1"; for(i=1; i<=NF; i++) string=string=string","$i; print string,"}SSS temp4 > temp4b"}' temp4g > temp4h
sed "s/SSS/'/g" temp4h > temp4i
chmod a+x temp4i
./temp4i

# Create line-by-line values that are correlate of the facility-specfic portion of the locfile.damages.allDF file.
# DFs without a value are elminated.  These are marked by "-" in the spreadsheet.
awk '{if(NR==1) for(i=2; i<=NF; i++) label[i]=$i;  \
      if(NR>1) for(i=2; i<=NF; i++) print $1,label[i],$i}' temp4b > temp5
awk '{if($NF!="-") print $0}' temp5 > temp6
echo LASTLINE >> temp6
# NEXT HANDLE ALLDFS LINES
awk '{if(NR==1) lastloc=$1; if($1==lastloc) print $0 ;  \
        else {print "----"; if($1!="LASTLINE") {print $0; lastloc=$1} } }' temp6 > temp7

# Merge damages.allDFs file and the line-by-line correlate of values.
awk '{if($2!="-" && $2!="lon" && NF>1) print $0}' $allDFsfile > temp8
paste temp8 temp7 > temp9

# Check for mis-matched DFs and associated values.
# XXX Note that locations of the DF names is dependent on the number of periods (currently 9).
awk '{split($(NF-12), array1, "-"); split($(NF-1), array2, "_");  \
      dfid1=array1[1]; dfid2=array2[2];  \
      if(dfid1!=dfid2) print "***** ERROR:  DFs do not match for line", NR}' temp9

# Apply the values.
awk '{if(NR==1) {periods=9; start=NF-periods-3};  \
      for(i=1; i<=start; i++) string1=string1" "$i;  \
      for(i=1; i<=periods; i++) {value=$NF;  \
               if($(NF-4)!="NA") string2=string2" "(value*$(start+i)/100); else string2=string2" NA"};  \
      print string1,string2; string1=""; string2=""}' temp9 > temp10

# Combine values for each DF.
# The combination rule below is summation of values for all DFs.
grep -v allDFs temp10 > temp11
echo LASTLINE >> temp11
awk '{if(NR==1) {imin=NF-8; imax=NF; split($1,array,"_"); lastfac=array[1]; for(i=1; i<=imin-2; i++) string=string" "$i};  \
      split($1,array,"_");  \
      if(array[1]==lastfac)  {for(i=imin; i<=imax; i++) score[i]=score[i]+$i;  \
                              print $0}  \
         else {for(i=imin; i<=imax; i++) scoreall=scoreall" "score[i];  \
               print string,"z--allDFs--z",scoreall; lastfac=array[1]; scoreall=""; string="";  \
	       for(i=1; i<=imin-2; i++) string=string" "$i;  \
	       if($1!="LASTLINE") print $0;  \
               if($1!="LASTLINE") for(i=imin; i<=imax; i++) score[i]=$i }  \
     }' temp11 > temp12

# Save results and clean up.
mv temp12 $allDFsfile.withvalues
#rm temp*

