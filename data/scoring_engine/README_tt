
--- VaR is assigned (as of 30jan18) in the creation of the two final outputs of script_build_nonphysical_v1 in the nonphysical directory.

0.  All of the commands below are encapsulated in one master script:  script_engine_runall_v1.

1.  tmax90p indicator

The following scripts extract timeseries, create period averages, apply damage functions, and score each location:

	script_extract_timeseries_v1
	script_period_averages_v1
	script_process_location_v1
	script_process_location_runall
	script_score_locations_tx90p_v1

Instructions on how to run each script are included in each script.  The first two scripts are run externally to the TCS app directory since they involve very large files.  The results of averaging historical data for five 30-year periods and future data for nine 10-year periods are stored within the current app directory at ./data/temperature/tmax90pct.

script_process_location_runall and script_score_locations_tx90p_v1 can be run locally to generate scoring data.  They depend only on the periods files stored here.  Execution is as follows:

	./script_process_location_runall <list of locations> <file of historical period values> <file of rcp85 period values>
	./script_score_locations_tx90p_v1 <damage-function file> <facility location file> <file of location-specific tx90p data>

Example:	./script_process_location_runall facility_locations_v2.csv tx90pETCCDI_yr_CMCC-CM_historical_r1i1p1_1850-2005.nc.timeseries.1.480.1.240.periods.5.30 tx90pETCCDI_yr_CMCC-CM_rcp85_r1i1p1_2006-2100.nc.timeseries.1.480.1.240.periods.9.10 
		./script_score_locations_tx90p_v1 damage_functions_v1.csv facility_locations_v2.csv facility_locations_v2.csv.tx90p

The output from the scoring process is in the file <facility list>.tx90p.damages.

2.  The process for the drought indicator, pdsisc, is similar:

	./script_extract_pdsisc_v1 <locations file> <worldwide sc_pdsi data file>
	./script_score_locations_psdisc_v1 <damage-function file> <facility location file> <file of location-specific psdisc data>

Example:	./script_extract_pdsisc_v1_runall facility_locations_v2.csv pdsisc.monthly.maps.1900-2099.r2.5x2.5.EnsAvg14Models.TP2.ipe\=2.nc.output.batch.9futperiods.withIDs
		./script_score_locations_psdisc_v1 damage_functions_v1.csv facility_locations_v2.csv facility_locations_v2.csv.pdsisc 

3.  For coastal flooding, the steps are:

a.  Get rp and slr data for each facility location:

 Execution:  ./script_get_nearest_segment_v1_runall_facilities <input list of locations> <GTSR .dbf.csv file or .dbf.csv. with slr station data>
 Example:    ./script_get_nearest_segment_v1_runall_facilities facility_locations.csv.testNA GTSR.dbf.csv.nearest.slr.station   (with slr station data)

b.  Produce the files future_annprob_fromR and future_rp_fromR:

	Rscript ./script_estimate_future_rp_v1.r

c.  Score the locations:

 Execution:  ./script_score_locations_coastalflood_v1 <damage-function file> <input facilities file> <future annual probabilities for the facilities file from r script_estimate_future_rp_v1.r>
 Example:  ./script_score_locations_coastalflood_v1 damage_functions_v1.csv facility_locations.csv.testNA future_annprob_fromR

4.  Assemble scores from each climate indicator across facilities and across companies:

 Execution:  ./script_assemble_damages_v1 <facility locations file>
 Example:    ./script_assemble_damages_v1 facility_locations_v2.csv


5.  Adding a new risk factor to the SE:

a.  Set up the directory for the risk factor containing the scoring script that produces damages, the damage-function file, the locations file, and the derived-variable file for this risk factor.  For example, for wildfire risk using the zindex90p derived variable:

	script_score_locations_zindex_v1
	df.csv.cln
	TCSDB_structure.locations.csv
	TCSDB_structure.locations.csv.zindex

This produces the TCSDB_structure.locations.csv.zindex.damages file.

b.  Add a block to script_runall_physical that generates makes the new risk factor a part of the SE run.  For example, for wildfire:

	cd ../wildfire/
	cp ../$facfile ./
	cp ../$damfile ./
	./script_score_locations_zindex_v1 $damfile $facfile $facfile.zindex
	mv $facfile.zindex.damages ../

c.  Once the new risk-factor damages are present in the SE directory, they are assembled with the other damages by script_assemble_damages_v1 to create the TCSDB_structure.locations.csv.damages.allDFs and TCSDB_structure.locations.csv.damages.allDFs.facilities.only.4r files.  

d.  Scoring is completed by ./nonphysical/script_runall_nonphysical.  This calls script_locationvalues_v1 that combines the damages (usually in percent loss) to the df-specific values of each location, producint TCSDB_structure.locations.csv.damages.allDFs.withvalues.  script_location_values_v1 also calls script_build_nonphysical_v1, which operates on files produced by load_tcsdb_nonphysical.r:

	riskfactors.csv - contains the risk factors defined in TCSDB_structure.xlsx
	subcat.csv - contains the TCFD subcategories (acute, chronic, policy/legal, etc.)
	cat.csv - contains the TCFD categories (transition, physical, opportunity) 
	corp.csv - contains the parent corporations

The first of these must be modified in the RiskFactor tab of TCSDB_structure.xlsx when a new risk is added.

e.  New damage functions must be added to the DamageFunction tab of TCSDB_structure.xlsx.

f.  ./TCSDB/load_tcsdb.r must be modeified to include the new risk.  For example, the following lines are added for the new zindex-based wild fire risk:

	val_zindex = dbsheet11 %>% select(df_zindex)
	init$input.txtAssetValue_zindex <- unlist(val_zindex)
	init2$input.txtAssetValue_zindex <- "-"



