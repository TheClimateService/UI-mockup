
# SCRIPT TO MERGE DATA SETS FROM DIFFERENT SOURCES, PRESERVING ONE ENTRY FOR EACH LOCATION
# TT - July 2018

# Execution:	./script_merge_data_v1 <data file 1> <data file 2>
# Example:	./script_merge_data_v1 TCSDB_structure.locations.csv.pdsisc TCSDB_structure.locations.csv.pdsisc.nexgddp.rcp85

# Format for original Dai pdsisc data:
# 1_1_Boise -116.149136 43.529396	25 41	-116.25 43.75 0.1 0.6 0.2 0.3 0.7 0.6 0.8 0.9 0.8 0.7

# The NEX-GDDP data is organized into values for 10 periods.  Two historical decades and 8 future decades.  After 7 location-related fields, there are three sets of 10 values for pdsi, scpdsi, and the zindex.
# 1_1_Boise	- - - - - -  0.08994708994709 0.111904761904762 0.181746031746032 0.228571428571429 0.270238095238095 0.277777777777778 0.323015873015873 0.319444444444444 0.365873015873016 0.396825396825397  0.0842151675485009 0.116269841269841 0.23452380952381 0.348809523809524 0.326190476190476 0.394047619047619 0.388888888888889 0.399603174603175 0.472222222222222 0.547619047619048  0.0961199294532628 0.106746031746032 0.130555555555555 0.15515873015873 0.173809523809524 0.177777777777778 0.217063492063492 0.225396825396825 0.247619047619048 0.259126984126984

# Get inputs
infile1=$1
infile2=$2

# Get the appropriate data from the nex-gddp file.
# Note field numbers are one higher than expected in the second cut below.
cut -d " " -f 1-7 $infile2 > temp0
cut -d " " -f 19-28 $infile2 > temp0a
paste temp0 temp0a > temp0b

# Merge and save one element for each location.
# The sort below puts the nex-gddp data first since the second field in this data is "-", while the Dai-based data has a longitude value in the second field.
cat $infile1 temp0b | sort -n > temp1
awk '{if($1!=lastloc) print $0; lastloc=$1}' temp1 > temp2

# Save results and clean up.
mv temp2 $infile1.merged
rm temp*

