exceedance_prob = p
exceedance_prob[1,1] = 1 - (1-p[1,1])
exceedance_prob
p
exceedance_prob[1,1] = 1 - (1-p[1,1]*p[1,2])
exceedance_prob[1,1] = 1 - (1-p[1,1]*p[2,1])
exceedance_prob
exceedance_prob[1,1] = 1 - (1-p[1,1])
exceedance_prob[2,1] = 1 - (1-p[1,1]*p[2,1])
exceedance_prob
p
exceedance_prob[2,1] = 1 - (1-p[1,1]*(1-p[2,1]))
exceedance_prob
exceedance_prob[2,1] = 1 - (1-p[1,1])*(1-p[2,1])
exceedance_prob
prod = p
for(i in 1:length(pannual)) { for(i in 1:length(pannual)) prod[i,1] = p[j,1]  }
t = c(1,2,3)
prod(t)
for(i in 1:length(pannual)) { for(i in 1:length(pannual)) prod[i,1] = prod  }
t = c(1,2,3,4)
t2=as.tibble(t)
t2[2,1]
for(j in 1:3) prod(t2)
x = for(j in 1:3) prod(t2)
x
x = for(j in 1:3) prod(t2[j,1])
x
t = c(1,2,3,4)
prod(t)
prod(t,2)
x = as.tibble(t)
x
prod(x)
prod(x,1)
prod(x[1,1]:x[3,1])
prod(x[1,1],x[3,1])
prod(x[1,1]:x[3,1])
subset(t)
subset(t[i,1], i %in% 1,3)
subset(t, i %in% 1,3)
subset(t, i %in% 1:3)
subset(t[i,1], i %in% 1:3)
t[1]
subset(x[i,1], i %in% 1:3)
subset(x[i,1], i<=3)
p
x = p
for(i in 1:length(pannual)) {for(j <= i) x[i,1]=x[i,1]*x[j]}
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=x[i,1]*x[j]}
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=x[i,1]*x[j,1]}
x
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
x = p
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
y = 1-x
y
x = p
for(i in 1:length(pannual)) {for(j in 1:(i-1)) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x = p
for(i in 1:length(pannual)) {for(j in 2:(i-1)) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x = p
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
x = p
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=x[i,1]*(1-x[j,1])}
x
1-x
x = p
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
1-x
x = p
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=1 - (1-x[i,1])*(1-x[j,1])}
x
x = p
for(i in 1:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
x = p
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
1-x
x = p
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(x[i,1])*(1-x[j,1])}
x
p
x = p
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
test = 1 - .998*.993
test
test = 1 - .998*.995
test
test = 1 - .998*.995*.9831
test
test = 1 - .998*.995*.99
test
for(i in 1:length(pannual)) {for(j in 1:(1-1)) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x = p
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-x[j,1])}
x
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(1-p[i,1])*(1-p[j,1])}
x
x = p
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(x[i,1])*(1-p[j,1])}
x
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-p[j,1])}
x
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=-1+(x[i,1])*(1-p[j,1])}
x
x = p
for(i in 2:length(pannual)) {for(j in 1:i) x[i,1]=(1-x[i,1])*(1-p[j,1])}
x
x = p
for(i in 2:length(pannual)) x[i,1]=(1-x[i-1,1])*(1-p[i,1])
x
x = p
for(i in 2:length(pannual)) x[i,1]= 1-(1-x[i-1,1])*(1-p[i,1])
x = p
for(i in 2:length(pannual)) x[i,1]= 1-(1-x[i-1,1])*(1-p[i,1])
x
x = p
for(i in 2:length(pannual)) x[i,1]= 1-(1-x[i-1,1])*(1-p[i,1])
x
plot(x)
plot(x,l)
plot(l,x)
l
plot(c(x,l))
plot(l,x)
c = c(l,x)
plot(c)
c
c(1,)
plot(c(l[1,1], l[2,1]), c(x[1,1], x[2,1]))
quit()
library(RMySQL)
library(psych)
con <- dbConnect(MySQL(), user = 'root', password = 'mysql_root', host = 'localhost', dbname='sys')
con <- dbConnect(MySQL(), user = 'root', password = 'mysql_root', host = 'localhost', dbname='menagerie')
dbWriteTable(conn = con, name = 'Test', value = as.data.frame(Thurstone))
omega(dbReadTable(conn = con,name = 'Test'), title = "9 variables from Thurstone")
install.packages(GPArotation)
install.packages("GPArotation")
library(GPArotation)
omega(dbReadTable(conn = con,name = 'Test'), title = "9 variables from Thurstone")
summary(Thurstone)
Thurstone[1,]
quit()
library(pdsi)
data(muc.clim)
pdsi(12, 50, muc.clim, 1960, 2000)
getwd()
head(muc.clim)
tail(muc.clim)
x = pdsi(12, 50, muc.clim, 1960, 2000)
x2 = pdsi(24, 50, muc.clim, 1960, 2000)
head(x2-x)
head(x2)
x2[1]
x2[1,1]
x2[1,1,1]
x2[1,]
x[1]
x2 = pdsi(60, 50, muc.clim, 1960, 2000)
x2[1]
x2 = pdsi(60, 40, muc.clim, 1960, 2000)
x2[1]
head(muc.clim)
quit()
library(shiny)
setwd("/Users/terry/working_mac/os/apps/r/tcs/")
runApp("./app_tcs_22/")
setwd("./app_tcs_22/data/scoring_engine/coastalflooding/")
source("script_estimate_future_rp_v1.r")
warnings(5)
nlocations
head(rldata)
rldata$X7
slrdata$X7
rlfutloc[1,]
rlfutloc[7,]
nrow(rlfutloc)
rlfutloc[6,]
head(rlfutloc)
tail(rlfutloc)
tail(rlfutloc2)
rldata$X7
rldata$X151
slrdata$X151
rlfutloc(151,6,9)
rlfutloc2[151,6,9]
3.3709564624 + 0.82
rlfutloc2[151,6,10]
rlfutloc2[151,6,9]
rlfutloc2[152,6,9]
rlfutloc2[1521,6,]
rlfutloc2[151,6,]
x = select(data[151,], RLm2yr:RLm1000yr)
x
slr = select(data[151,], rcp85_2030cm:rcp85_2100cm)
slr
slr2 = as.numeric(t(slr))
model <- lm(slr2 ~ poly(slryrs,2,raw=TRUE))
f4slr = function(t) {summary(model)$coefficients[1,1] + summary(model)$coefficients[2,1]*t + summary(model)$coefficients[3,1]*t^2  }
change_local_slr_cm = c(f4slr(2010),f4slr(2020),f4slr(2030),f4slr(2040),f4slr(2050),f4slr(2060),f4slr(2070#
),f4slr(2080),f4slr(2090) )
change_local_slr_cm
3.3709564624 + 70.542857
3.3709564624 + .70542857
rlfutloc2[151,,9]
rlfutloc2[151,,5]
rlfutloc2[150,,5]
rlfutloc2[150,,5]
rlfutloc2[151,6,9]
rpfutloc2[151,6,9]
rpfutloc2[151,6,8]
x
x = select(data[151,], RLm2yr:RLm1000yr)
x
slr = select(data[151,], rcp85_2030cm:rcp85_2100cm)
slr
x2 = as.numeric(t(x))
slr2 = as.numeric(t(slr))
x2
slr2
rpfutloc2[151,,,]
rpfutloc2[151,,]
rpfutloc2[151,,9
]
select(data[150,], RLm2yr:RLm1000yr)
rpfutloc2[150,,9]
rpfutloc2[150,,]
x2 = as.numeric(t(x))
x2
x
x
rlfutloc2[151,,]
rlfutloc2[151,,9]
rlfutloc2[151,6,9]
rpfutloc2[151,,9]
rpfutloc2[151,6,9]
rpfutloc2[151,,]
source("script_estimate_future_rp_v1.r")
rpfutloc2[151,,]
rlfutloc2[151,,]
x2
rphist
quit()
