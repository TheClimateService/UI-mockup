
# SCRIPT TO FIND THE LINE-SEGMENT CENTROID NEAREST A GIVEN LOCATION.
# TT - December 2017

# Execution:  ./script_get_nearest_segment_v1 <input lon> <input lat> <GTSR .dbf.csv file or .dbf.csv. with slr station data>
# Example:    ./script_get_nearest_segment_v1 -1.657 5 GTSR.dbf.csv	(without slr station data)
# Example:    ./script_get_nearest_segment_v1 -1.657 5 GTSR.dbf.csv.nearest.slr.station   (with slr station data)
# In the above case, the slr data for the nearest station has been appended to the return-level data in GTSR.dbf.csv by script_get_nearest_station_v1_runall_gtsrsegment.

# Get input.
inlon=$1
inlat=$2
gtsrfile=$3

# Extract line-segment centroid unique id (CLSFID), lon, and lat.
# $0 below is carried along to give easy access to the return-level data after the nearest segment is found.
awk '{FS=","; if(NR>1) print $3,$8,$6,$0}' $gtsrfile > temp1

# Calculate the GC distance between each centroid and a given lon/lat.
# ------------------------------
# Vincenty formula for GC distance:
#       y = sqrt( (cos(lat2)*sin(lon2-lon1))^2 + ( cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1) )^2)
#       x = sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2)*cos(lon2-lon1)
#       theta = arctan(y/x) = atan2(y,x)
#
# http://www.movable-type.co.uk/scripts/latlong.html
# This is the half-way point along a great circle path between the two points.
# Formula:      Bx = cos(lat2).cos(Δlong)
#               By = cos(lat2).sin(Δlong)
#               latm = atan2( sin(lat1) + sin(lat2), √((cos(lat1)+Bx)² + By²) )
#               lonm = lon1 + atan2(By, cos(lat1)+Bx)
# ------------------------------
echo LASTLINE >> temp1
awk -v inlon=$inlon -v inlat=$inlat '{  \
        rEarthnm=6887.7/2; rad2deg=180/3.14159; \
	# TEST  lat1=0.0/rad2deg; lon1=-40.0/rad2deg; lat2=0.0/rad2deg; lon2=140.0/rad2deg;  \
        # lat1deg=$3; lon1deg=$2; lat2deg=0.0; lon2deg=0.0;  \
        #lat1=$3/rad2deg; lon1=$2/rad2deg; lat2=4.98/rad2deg; lon2=-1.657/rad2deg;  \
        lat1=$3/rad2deg; lon1=$2/rad2deg; lat2=inlat/rad2deg; lon2=inlon/rad2deg;  \
        y = sqrt( (cos(lat2)*sin(lon2-lon1))^2 + ( cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1) )^2 );  \
        x = sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2)*cos(lon2-lon1);  \
        theta=atan2(y,x);  \
        thetadeg=rad2deg*theta;  \
        gcdistnm=rEarthnm*theta;  \
	if(NR==1) {mindistnm=gcdistnm; mindistid=$1; mindistdata=$4};  \
	if(gcdistnm < mindistnm) {mindistnm=gcdistnm; mindistid=$1; mindistdata=$4""$5};  \
        if($1=="LASTLINE") {mindistkm=1.852*mindistnm; print mindistkm,mindistid,mindistdata}  \
        #print $0, gcdistnm, mindistnm, mindistid
        }' temp1 > temp2

# Select and order the return-levels according to their return period.
# The format of the input to this step is:
# mindistkm mdistid "Join_Count,N,9,0","TARGET_FID,N,9,0","CLSFID,N,9,0","ADMINID,N,19,5","COUNTRYID,N,19,5","LATI,N,19,5","LENGTH,N,19,5","LONGI,N,19,5","rp00005,N,19,15","rp00010,N,19,15","rp00002,N,19,15","rp00500,N,19,15","rp00100,N,19,15","Station,C,80","rp00050,N,19,15","rp00250,N,19,15","Nr,N,10,0","rp01000,N,19,15","rp00025,N,19,15"
# For example, the 5-year return level (in meters) is the 9th element in the comma-separated field 3, the 2-year level is the 11th, etc.

# Once the slr stations are mapped to the gtsr segments, the gtsr data contains the following addtional fields:
#  ",mindistkm,station,id,lon,lat,background_rate,rcp85_2030cm,rcp85_2050cm,rcp85_2100cm,rcp45_2030cm,rcp45_2050cm,rcp45_2100cm,rcp26_2030cm,rcp26_2050cm,rcp26_2100cm"

# NOTE SETTING OF THRESHOLD IN KM BELOW.  ANY LOCATION WITH DISTANCE TO THE NEAREST GTSR SEGMENT GREATER THAN THIS THRESHOLD WILL BE MARKED AS "TooFarFromCoast" AND RETURN LEVELS WILL NOT BE RETRIEVED.

awk '{thresholdkm=100;  \
      split($3,array,",");  \
      # (without slr station data) if($1<=thresholdkm) print $1,$2,array[3],array[8],array[6],array[11],array[9],array[10],array[19],array[15],array[13],array[16],array[12],array[18];  \
        # else print $1,$2,array[3],array[8],array[6],"TooFarFromCoast_threshold_"thresholdkm"km - - - - - - - -"  \
      if($1<=thresholdkm) print $1,$2,array[3],array[8],array[6],array[11],array[9],array[10],array[19],array[15],array[13],array[16],array[12],array[18],array[20],array[21],array[22],array[23],array[24],array[25],array[26],array[27],array[28],array[29],array[30],array[31],array[32],array[33],array[34];  \
        else print $1,$2,array[3],array[8],array[6],"TooFarFromCoast_threshold_"thresholdkm"km - - - - - - - - - - - - - - - - - - - - - - -"  \
     }' temp2 > temp2.single


